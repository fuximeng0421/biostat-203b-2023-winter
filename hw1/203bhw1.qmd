---
title: "Biostat 203B Homework 1"
subtitle: Due Jan 27 @ 11:55PM
author: Ximeng Fu 406071937
format:
  html:
    theme: cosmo
    number-sections: true
    toc: true
    toc-depth: 4
    toc-location: left
    code-fold: false
knitr:
  opts_chunk: 
    cache: false    
    echo: true
    fig.align: 'center'
    fig.width: 6
    fig.height: 4
    message: FALSE
---

Display machine information for reproducibility:

```{r}
sessionInfo()
```

## Q1. Git/GitHub

**No handwritten homework reports are accepted for this course.** We work with Git and GitHub. Efficient and abundant use of Git, e.g., frequent and well-documented commits, is an important criterion for grading your homework.

1.  Apply for the [Student Developer Pack](https://education.github.com/pack) at GitHub using your UCLA email. You'll get GitHub Pro account for free (unlimited public and private repositories).

2.  Create a **private** repository `biostat-203b-2023-winter` and add `Hua-Zhou` and `tomokiokuno0528` as your collaborators with write permission.

3.  Top directories of the repository should be `hw1`, `hw2`, ... Maintain two branches `master` and `develop`. The `develop` branch will be your main playground, the place where you develop solution (code) to homework problems and write up report. The `master` branch will be your presentation area. Submit your homework files (Quarto file `qmd`, `html` file converted by Quarto, all code and extra data sets to reproduce results) in `main` branch.

4.  After each homework due date, course reader and instructor will check out your `master` branch for grading. Tag each of your homework submissions with tag names `hw1`, `hw2`, ... Tagging time will be used as your submission time. That means if you tag your `hw1` submission after deadline, penalty points will be deducted for late submission.

5.  After this course, you can make this repository public and use it to demonstrate your skill sets on job market.

## Q2. Data ethics training

This exercise (and later in this course) uses the [MIMIC-IV data](https://mimic-iv.mit.edu), a freely accessible critical care database developed by the MIT Lab for Computational Physiology. Follow the instructions at <https://mimic.mit.edu/docs/gettingstarted/> to (1) complete the CITI `Data or Specimens Only Research` course and (2) obtain the PhysioNet credential for using the MIMIC-IV data. Display the verification links to your completion report and completion certificate here. (Hint: The CITI training takes a couple hours and the PhysioNet credentialing takes a couple days; do not leave it to the last minute.)

Here are the links for my report and certificate:
report:https://www.citiprogram.org/verify/?kcca81d3d-12b5-4f57-b320-17af9d2f51f5-53906989
certificate:https://www.citiprogram.org/verify/?wb5193bdb-70be-4be3-adb9-aee7efec115a-53906989


## Q3. Linux Shell Commands

1.  The `~/mimic` folder within the Docker container contains data sets from MIMIC-IV. Refer to the documentation <https://mimic.mit.edu/docs/iv/> for details of data files.

```{bash}
ln -s /Users/felicity/Desktop/ ~/mimic
ls ~/mimic
```

Please, do **not** put these data files into Git; they are big. Do **not** copy them into your directory. Do **not** decompress the gz data files. These create unnecessary big files on storage and are not big data friendly practices. Just read from the data folder `~/mimic` directly in following exercises.

Use Bash commands to answer following questions.

2.  Display the contents in the folders `core`, `hosp`, `icu`. 

```{bash}
ls -l ~/mimic/core
ls -l ~/mimic/hosp
ls -l ~/mimic/icu
```
Why are these data files distributed as `.csv.gz` files instead of `.csv` (comma separated values) files? Read the page <https://mimic.mit.edu/docs/iv/> to understand what's in each folder.
`.csv.gz` are compressed forms of `.csv` files. Therefore more information can be stored for the same storage.

3.  Briefly describe what bash commands `zcat`, `zless`, `zmore`, and `zgrep` do.
`zcat` can expand and view a compressed file without uncompressing the file.
`zless` allows examination of compressed file one screenful at a time on soft-copy terminal.
`zmore` is to view gzipped files one screen at a time without uncompressing.
`zgrep` is to search out expressions in a given file without uncompressing.


4.  What's the output of the following bash script?

```{bash}
for datafile in ~/mimic/core/*.gz
do
  ls -l $datafile
done
```

Display the number of lines in each data file using a similar loop.
```{bash}
for datafile in ~/mimic/core/*.gz
do
  echo $datafile
  gzcat $datafile | wc -l
done
```
5.  Display the first few lines of `admissions.csv.gz`. 
```{bash}
gzcat ~/mimic/core/admissions.csv.gz | head
```

How many rows are in this data file? 
```{bash}
gzcat ~/mimic/core/admissions.csv.gz | wc -l
```
How many unique patients (identified by `subject_id`) are in this data file? (Hint: combine Linux commands `zcat`, `head`/`tail`, `awk`, `sort`, `uniq`, `wc`, and so on.)
```{bash}
gzcat ~/mimic/core/admissions.csv.gz |\
 awk -F "," 'NR > 1 {print $1 | "sort | uniq"}' | wc -l
```
6.  What are the possible values taken by each of the variable `admission_type`, `admission_location`, `insurance`, and `ethnicity`? Also report the count for each unique value of these variables. (Hint: combine Linux commands `zcat`, `head`/`tail`, `awk`, `uniq -c`, `wc`, and so on.)
```{bash}
gzcat ~/mimic/core/admissions.csv.gz |\
 awk -F "," 'NR == 1 {print $6}; NR > 1 {print $6 | "sort | uniq -c"}' 
```
```{bash}
gzcat ~/mimic/core/admissions.csv.gz |\
 awk -F "," 'NR == 1 {print $7}; NR > 1 {print $7 | "sort | uniq -c"}' 
```
```{bash}
gzcat ~/mimic/core/admissions.csv.gz |\
 awk -F "," 'NR == 1 {print $9}; NR > 1 {print $9 | "sort | uniq -c"}' 
```
```{bash}
gzcat ~/mimic/core/admissions.csv.gz |\
 awk -F "," 'NR == 1 {print $12}; NR > 1 {print $12 | "sort | uniq -c"}' 
```
## Q4. Who's popular in Price and Prejudice

1.  You and your friend just have finished reading *Pride and Prejudice* by Jane Austen. Among the four main characters in the book, Elizabeth, Jane, Lydia, and Darcy, your friend thinks that Darcy was the most mentioned. You, however, are certain it was Elizabeth. Obtain the full text of the novel from <http://www.gutenberg.org/cache/epub/42671/pg42671.txt> and save to your local folder.

```{bash}
wget -nc http://www.gutenberg.org/cache/epub/42671/pg42671.txt
```

Explain what `wget -nc` does. 
'wget' is to retrieve file from the web server. '-nc' is to make sure the file is retrieved again if it has already been downloaded.


Do **not** put this text file `pg42671.txt` in Git. Complete the following loop to tabulate the number of times each of the four characters is mentioned using Linux commands.

```{bash}
for char in Elizabeth Jane Lydia Darcy
do
  echo $char:
 cat pg42671.txt | grep -o $char | wc -l
done
```

2.  What's the difference between the following two commands?

```{bash}
#| eval: false
echo 'hello, world' > test1.txt
```

and

```{bash}
#| eval: false
echo 'hello, world' >> test2.txt
```
When echoing something into file, '>' overwrites the file and '>>' apppends to the file. For the first command, it will overwrite 'hello world' into earlier text. For the second command, it will append 'hello world' to existing text.

3.  Using your favorite text editor (e.g., `vi`), type the following and save the file as `middle.sh`:

```{bash eval=FALSE}
#!/bin/sh
# Select lines from the middle of a file.
#Usage: bash middle.sh filename end_line num_lines
head -n "$2" "$1" | tail -n "$3"
```

Using `chmod` to make the file executable by the owner, and run

```{bash}
chmod 700 ~/Desktop/203b-hw/middle.sh
~/Desktop/203b-hw/middle.sh pg42671.txt 20 5
```

Explain the output. 
The output is printing out last 5 lines in the first 20th line in pg42671.txt.

Explain the meaning of `"$1"`, `"$2"`, and `"$3"` in this shell script. 
'$1' means pg42671.txt, '$2' means 20, and '$3' means 5. 

Why do we need the first line of the shell script?
Because we need to know which shell are we executing the files.

## Q5. More fun with Linux

## Try following commands in Bash and interpret the results: 
```{bash}
cal
cal 2021
cal 9 1752
```
(anything unusual?)
cal displays the calender of current month and year. cal 2021 displays the calender for the whole 2021 year. For 1752 September, there are some dates missing. This is because Britain changed over from the Julian calendar to the Gregorian calendar.

```{bash}
date
```
date is to find current date and time.

```{bash}
hostname
```
hostname is to obtain DNS name.

```{bash}
arch
```
arch is to get current computer architecture

```{bash}
uname -a
```
uname returns the name of operating system.

```{bash}
uptime
```
uptime is to find out how long this system has been running.

```{bash}
who am i 
```
'who am i' command is to find current log-in user.

```{bash}
who
```
'who' command print information about users who are currently logged in.

```{bash}
w
```
'w' shows users username, where they are logged in from, and what they are currently doing.

```{bash}
id
```
'id' prints genuine and effective user ID and group ID.

```{bash}
last | head
```
This command prints first ten users logged in and out.

```{bash}
echo {con,pre}{sent,fer}{s,ed}
```
This command displays texts into all possible combinations.

```{bash}
time sleep 5
```
'sleep 5' suspends the calling process of the next command for 5 seconds, and 'time' commands record the time.
```{bash}
history | tail
```
In my terminal, this command displays last ten commands that has been run. 